class LiveScreen {
    constructor (id) { this.assignMarvelDevice(id); this.setDefaultOptions(); this.drawScreen() }
    create(className) { let ele = document.createElement('div'); ele.classList.add(className); return ele }
    assignMarvelDevice(id) {
        const element = document.getElementById(id); if (element == null) { return console.error('Unable to find element with the id of ' + id) }
        if (!element.classList.contains('marvel-device')) { return console.error('The element you\'re trying to bind to isn\'t a valid marvel-device.') }
        this.device = element
    }
    setDefaultOptions() {
        this.options = { carrier: 'T-Mobile', device: this.getDeviceModel(), os: 'ios12', status_bar: { carrier: !1, wifi: !1, tab: !1, lock: !1, bluetooth: !1, signal: !1, battery: !1, date: !1, time: !1, user: !1, }, lock_icon: !1, clock: !0, notifications: !0, login: !1, unlock_text: !1, shortcuts: !1 }; switch (this.options.device) { case 'iphone-x': case 'iphone8': case 'iphone8plus': case 'iphone5c': case 'iphone5s': case 'iphone4s': case 'ipad': this.options.os = 'ios12'; break; case 'note8': case 's5': case 'nexus5': case 'htc-one': this.options.os = 'pie'; break; case 'lumia920': this.options.os = 'windows-phone-8'; break; case 'macbook': this.options.os = 'high-sierra'; break }
        switch (this.options.os) {
            case 'ios12': if (this.options.device == 'iphone-x') { this.options.lock_icon = !0; this.options.unlock_text = 'Swipe up to unlock' } else { this.options.status_bar.lock = !0; this.options.unlock_text = 'Press home to unlock' }
                this.options.status_bar.signal = !0; this.options.status_bar.wifi = !0; this.options.status_bar.battery = !0; this.options.status_bar.carrier = !0; this.options.status_bar.bluetooth = !0; this.options.shortcuts = !0; break; case 'pie': this.options.status_bar.signal = !0; this.options.status_bar.bluetooth = !0; this.options.status_bar.carrier = !0; this.options.status_bar.wifi = !0; this.options.status_bar.battery = !0; this.options.shortcuts = !0; break; case 'windows-phone-8': this.options.status_bar.signal = !0; this.options.status_bar.carrier = !0; this.options.status_bar.wifi = !0; this.options.status_bar.battery = !0; this.options.notifications = !1; this.options.shortcuts = !0; break; case 'high-sierra': this.options.clock = !1; this.options.status_bar.wifi = !0; this.options.status_bar.battery = !0; this.options.status_bar.date = !0; this.options.status_bar.time = !0; this.options.notifications = !1; this.options.login = !0; this.options.unlock_text = 'Cancel'; this.options.shortcuts = !0; break
        }
    }
    getDeviceModel() {
        const deviceClasses = this.device.classList; const deviceModels = ['iphone-x', 'note8', 'iphone8', 'iphone8plus', 'iphone5s', 'iphone5c', 'ipad', 'iphone4s', 'nexus5', 'lumia920', 's5', 'htc-one', 'macbook']; let i = 0; let model = !1; while (i < deviceModels.length) {
            model = deviceModels[i]; if (deviceClasses.contains(model) == !0) { break }
            i++
        }
        if (!model) { return console.error('Can\'t find marvel device model associated with element with ' + this.device.id + ' id') }
        return model
    }
    addToScreen(ele) { this.device.getElementsByClassName('screen')[0].appendChild(ele) }
    drawScreen() {
        this.device.classList.add(this.options.os); this.drawStatusBar(); if (this.options.lock_icon == !0) { this.drawLockIcon() }
        if (this.options.clock == !0) { this.drawClock() }
        if (this.options.notifications == !0) { this.drawNotifications() }
        if (this.options.login == !0) { this.drawLogin() }
        if (this.options.unlock_text != !1) { this.drawUnlock() }
        if (this.options.shortcuts == !0) { this.drawShortcuts() }
        if (this.options.status_bar.time == !0 || this.options.clock == !0) { this.time() }
        if (this.options.status_bar.date == !0 || this.options.clock == !0) { this.date() }
    }
    drawStatusBar() {
        const status_bar = this.create('status_bar'); for (let eleName in this.options.status_bar) {
            let option = this.options.status_bar[eleName]; if (option == !0) {
                let ele = this.create(eleName); if (this.options.hasOwnProperty(eleName)) { ele.innerHTML = this.options[eleName] }
                status_bar.appendChild(ele)
            }
        }
        this.addToScreen(status_bar)
    }
    drawLockIcon() { const lock = this.create('lock_icon'); this.addToScreen(lock) }
    drawClock() { const clock = this.create('clock'); const time = this.create('time'); const date = this.create('date'); clock.appendChild(time); clock.appendChild(date); this.addToScreen(clock) }
    drawNotification(notification) {
        const notificationContainer = this.device.querySelector('.notifications'); let notificationEle = this.create(notification.type); notificationEle.classList.add('shrink'); let topEle = this.create('top'); let iconEle = this.create('icon'); let titleEle = this.create('title'); titleEle.innerText = notification.type; let time_agoEle = this.create('time_ago'); time_agoEle.innerText = (Math.floor(Math.random() * 10) + 1) + " min"; let imageEle = this.create('image'); if (notification.image != !1) { imageEle.style.backgroundImage = notification.image }
        let descriptionEle = this.create('description'); descriptionEle.innerText = notification.description; topEle.appendChild(iconEle); topEle.appendChild(titleEle); topEle.appendChild(time_agoEle); notificationEle.appendChild(topEle); notificationEle.appendChild(imageEle); notificationEle.appendChild(descriptionEle); if (notificationContainer.childNodes.length < 1) { notificationContainer.appendChild(notificationEle) } else { let child = notificationContainer.firstChild; notificationContainer.insertBefore(notificationEle, child) }
        setTimeout(function (notificationContainer) { notificationContainer.firstChild.classList.remove('shrink') }, 100, notificationContainer)
    }
    drawNotifications() { const notifications = [{ type: 'instagram', image: !1, icon: !1, description: 'instagram liked your comment' }, { type: 'facebook', image: !1, icon: !1, description: 'Facebook liked your post' }, { type: 'whatsapp', image: !1, icon: !1, description: 'WhatsApp have sent you a reply' }, { type: 'twitter', image: !1, icon: !1, description: 'Twitter just retweeted you' }, { type: 'snapchat', image: !1, icon: !1, description: 'Snapchat replayed your snap!' }, { type: 'telegram', image: !1, icon: !1, description: 'Telegram has joined your channel' }]; const notificationsEle = this.create('notifications'); this.addToScreen(notificationsEle); let i = 0; setInterval(function ($this) { $this.drawNotification(notifications[i]); i++; if (i >= 6) { i = 0; setTimeout(function () { notificationsEle.classList.add('swipe') }, 1350); setTimeout(function () { notificationsEle.innerHTML = ''; notificationsEle.classList.remove('swipe') }, 2450); i = 0 } }, 3500, this) }
    drawLogin() { const loginEle = this.create('login'); const profileEle = this.create('profile'); const userEle = this.create('user'); userEle.innerText = 'Bill Gates'; const passwordEle = this.create('password'); loginEle.appendChild(profileEle); loginEle.appendChild(userEle); loginEle.appendChild(passwordEle); this.addToScreen(loginEle) }
    drawUnlock() { const unlockEle = this.create('unlock'); unlockEle.innerText = this.options.unlock_text; this.addToScreen(unlockEle) }
    drawShortcuts() { const shortcutsEle = this.create('shortcuts'); const first = this.create('first'); const second = this.create('second'); const third = this.create('third'); shortcutsEle.appendChild(first); shortcutsEle.appendChild(second); shortcutsEle.appendChild(third); this.addToScreen(shortcutsEle) }
    time() { try { this.updateTime(); setInterval(this.updateTime.bind(this), 1000) } catch (e) { console.dir(e) } }
    updateTime() {
        let dateTime = new Date(); let hours = ('0' + dateTime.getHours()).slice(-2), mins = ('0' + dateTime.getMinutes()).slice(-2); let value = hours + ':' + mins; const timeEles = this.device.querySelectorAll('.time'); let i = 0; while (i < timeEles.length) {
            let timeEle = timeEles[i]; if (timeEle.innerText != value) { timeEle.innerText = value }
            i++
        }
    }
    date() { try { this.updateDate(); setInterval(this.updateDate.bind(this), 1000) } catch (e) { console.dir(e) } }
    updateDate() {
        let dateTime = new Date(); const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; let day = days[dateTime.getDay()], month = months[dateTime.getMonth()], date = ('0' + dateTime.getDate()).slice(-2); let value = day + ', ' + month + ' ' + date; const dateEles = this.device.querySelectorAll('.date'); let i = 0; while (i < dateEles.length) {
            let dateEle = dateEles[i]; if (dateEle.parentNode.classList.contains('status_bar')) { value = day.substring(0, 3) }
            if (dateEle.innerText != value) { dateEle.innerText = value }
            i++
        }
    }
}